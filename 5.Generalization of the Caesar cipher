from math import gcd
def mod_inverse(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None
def is_valid_a(a):
    return gcd(a, 26) == 1
def encrypt_affine(a, b, plaintext):
    if not is_valid_a(a):
        return "Invalid 'a'. Must be coprime with 26."
    plaintext = plaintext.upper()
    ciphertext = ''
    for char in plaintext:
        if char.isalpha():
            p = ord(char) - ord('A')
            c = (a * p + b) % 26
            ciphertext += chr(c + ord('A'))
        else:
            ciphertext += char
    return ciphertext
def decrypt_affine(a, b, ciphertext):
    if not is_valid_a(a):
        return "Invalid 'a'. Cannot decrypt."
    a_inv = mod_inverse(a, 26)
    if a_inv is None:
        return "No modular inverse for 'a'."
    ciphertext = ciphertext.upper()
    plaintext = ''
    for char in ciphertext:
        if char.isalpha():
            c = ord(char) - ord('A')
            p = (a_inv * (c - b)) % 26
            plaintext += chr(p + ord('A'))
        else:
            plaintext += char
    return plaintext
if __name__ == "__main__":
    print("Affine Caesar Cipher")
    choice = input("Type 'e' to encrypt or 'd' to decrypt: ").lower()
    try:
        a = int(input("Enter 'a' (must be coprime with 26): "))
        b = int(input("Enter 'b' (0-25): "))
    except ValueError:
        print("Please enter valid integers for a and b.")
        exit()
    text = input("Enter message: ")
    if choice == 'e':
        print("Encrypted:", encrypt_affine(a, b, text))
    elif choice == 'd':
        print("Decrypted:", decrypt_affine(a, b, text))
    else:
        print("Invalid choice.")
